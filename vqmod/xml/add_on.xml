<modification>
	<id>Addon System</id>
	<version>1.5.1.2</version>
	<vqmver>2.0</vqmver>
	<author>Lorath</author>
	<file name="catalog/controller/product/product.php">
				<operation>
			<search position="before">
				<![CDATA[			$this->data['attribute_groups'] = $this->model_catalog_product->getProductAttributes($this->request->get['product_id']);]]>
			</search>
			<add>
				<![CDATA[$this->data['moreinfo'] = html_entity_decode($product_info['more_info'], ENT_QUOTES, 'UTF-8');]]>
			</add>
		</operation>

		<operation>
			<search position="before">
				<![CDATA[			$this->data['tags'] = array();]]>
			</search>
			<add>
				<![CDATA[
							$this->data['addons'] = array();
			
			$addonresults = $this->model_catalog_product->getProductaddon($this->request->get['product_id']);
			foreach ($addonresults as $addonresult) {
				if ($addonresult['image']) {
					$image = $this->model_tool_image->resize($addonresult['image'], $this->config->get('config_image_related_width'), $this->config->get('config_image_related_height'));
				} else {

					$product_image =$this->model_catalog_product->getProductImage($addonresult['product_id']);
					if($product_image){
						$image = $this->model_tool_image->resize($product_image['image'], $this->config->get('config_image_related_width'), $this->config->get('config_image_related_height'));
					}else{
						$image = false;
					}
				}
				
				if (($this->config->get('config_customer_price') && $this->customer->isLogged()) || !$this->config->get('config_customer_price')) {
					$price = $this->currency->format($this->tax->calculate($addonresult['price'], $addonresult['tax_class_id'], $this->config->get('config_tax')));
				} else {
					$price = false;
				}
						
				if ((float)$addonresult['special']) {
					$special = $this->currency->format($this->tax->calculate($addonresult['special'], $addonresult['tax_class_id'], $this->config->get('config_tax')));
				} else {
					$special = false;
				}
				
				if ($this->config->get('config_review_status')) {
					$rating = (int)$addonresult['rating'];
				} else {
					$rating = false;
				}
							
				$this->data['addons'][] = array(
					'product_id' => $addonresult['product_id'],
					'thumb'   	 => $image,
					'name'    	 => $addonresult['name'],
					'price'   	 => $price,
					'special' 	 => $special,
					'rating'     => $rating,
					'reviews'    => sprintf($this->language->get('text_reviews'), (int)$addonresult['reviews']),
					'href'    	 => $this->url->link('product/addon', 'product_id=' . $addonresult['product_id']),
					'addon_add_href'    => $this->url->link('product/product/addon_cart', 'addon_id=' . $addonresult['product_id'])

				);
			}	
			]]>
			</add>
		</operation>
		<operation info="recommended for">
			<search position="after"><![CDATA[			$this->data['attribute_groups'] = $this->model_catalog_product->getProductAttributes($this->request->get['product_id']);]]>
			</search>
			<add><![CDATA[$this->data['recommendedfors'] = $this->model_catalog_product->getProductRecommendations($this->request->get['product_id']);
				$this->data['downloads'] = $this->model_catalog_product->getProductDowloads($this->request->get['product_id']);
			$this->data['faqs'] = $this->model_catalog_product->getProductFaqs($this->request->get['product_id']);
			$this->data['features'] = $this->model_catalog_product->getProductFeatureimages($this->request->get['product_id']);
			]]>
			</add>
		</operation>
	</file>
	<file name="catalog/model/catalog/product.php">
		<operation>
			<search position="after">
				<![CDATA[				'date_modified'    => $query->row['date_modified'],]]>
			</search>
			<add>
				<![CDATA['more_info'    => $query->row['more_info'],]]>
			</add>
		</operation>
		<operation>
			<search position="before">
				<![CDATA[	public function getProductLayoutId($product_id) {]]>
			</search>
			<add>
				<![CDATA[

					public function getProductImage($product_id)
					{
						$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "product_image WHERE product_id='".$product_id."' ");
						if($query->num_rows >0){
							return $query->row;
						}else{
							return false;
						}
					}


					public function getProductaddon($product_id) {
						$product_data = array();
						$search_id="-".$product_id."-";
						$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "product WHERE product_type='2' AND parent_product_id LIKE '%".$search_id."%'");
								
							foreach ($query->rows as $result) { 
								$product_data[$result['product_id']] = $this->getProduct($result['product_id']);
							}
							
							return $product_data;
						}
								public function getProductRecommendations($product_id) {
							$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "product_recommended_for WHERE product_id = '" . (int)$product_id . "' ORDER BY sort_order ASC");

							return $query->rows;
						}

								public function getProductDowloads($product_id) {
							$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "product_to_download PD, " . DB_PREFIX . "download D WHERE PD.product_id = '" . (int)$product_id . "' AND D.download_id=PD.download_id");
							
							return $query->rows;
						}
							public function getProductFaqs($product_id) {
							$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "product_faqs WHERE product_id = '" . (int)$product_id . "'");
							
							return $query->rows;
						}	
						public function getProductFeatureimages($product_id) {
							$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "product_features pf," . DB_PREFIX . "feature_images fi WHERE product_id = '" . (int)$product_id . "' AND fi.feature_id=pf.feature_id");
							return $query->rows;
						}	
				]]>
			</add>
		</operation>
	</file>
	
</modification>